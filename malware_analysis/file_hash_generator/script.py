import hashlib
import datetime


def gen_md5(file_name):
    block_size = 65536
    hashing_function = hashlib.md5()

    with open(file_name, 'rb') as opened_file:
        buf = opened_file.read(block_size)

        while len(buf) > 0:
            hashing_function.update(buf)
            buf = opened_file.read(block_size)

    return hashing_function.hexdigest()


def gen_sha1(file_name):
    block_size = 65536
    hashing_function = hashlib.sha1()

    with open(file_name, 'rb') as opened_file:
        buf = opened_file.read(block_size)

        while len(buf) > 0:
            hashing_function.update(buf)
            buf = opened_file.read(block_size)

    return hashing_function.hexdigest()


def gen_sha256(file_name):
    block_size = 65536
    hashing_function = hashlib.sha256()

    with open(file_name, 'rb') as opened_file:
        buf = opened_file.read(block_size)

        while len(buf) > 0:
            hashing_function.update(buf)
            buf = opened_file.read(block_size)

    return hashing_function.hexdigest()


if __name__ == '__main__':
    target_file = input('Enter the name of the file you want to hash: ')
    current_date_time = datetime.datetime.now()

    try:
        md5_hash = gen_md5(target_file)
        sha1_hash = gen_sha1(target_file)
        sha256_hash = gen_sha256(target_file)
    except FileNotFoundError:
        print(f'Error: File not found. Is it in the same directory as this script?')
        exit(0)

    print(f'\n')

    print(f'Filename: {target_file}')
    print(f'Date: {current_date_time.strftime("%B %d, %Y")}')
    print(f'Time: {current_date_time.strftime("%H:%M:%S")}')
    print(f'')
    print(f'MD5: {md5_hash}')
    print(f'SHA1: {sha1_hash}')
    print(f'SHA256: {sha256_hash}')

    print(f'\n')

